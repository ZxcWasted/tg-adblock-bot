import logging
from telegram import Update, ChatPermissions, ChatMember
from telegram.ext import Application, MessageHandler, ContextTypes, filters
from collections import defaultdict
from datetime import timedelta
from telegram import User
from telegram.ext import CommandHandler

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è —Ä–µ–∫–ª–∞–º–æ–π
AD_KEYWORDS = ["http", "https", "t.me", "bit.ly", "promo", "advertise", "buy now", "sale", "discount"]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
warnings = defaultdict(int)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É
def contains_advertising(text: str) -> bool:
    return any(word in text.lower() for word in AD_KEYWORDS)

# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message or not message.text:
        return

    text = message.text
    user = message.from_user
    user_id = user.id
    chat_id = message.chat.id

    if contains_advertising(text):
        member = await context.bot.get_chat_member(chat_id, user_id)
        status = member.status

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –µ—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω –∏ –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü, —Ç–æ —Ä–µ–∞–≥–∏—Ä—É–µ–º
        if status not in [ChatMember.ADMINISTRATOR, ChatMember.OWNER]:
            await message.delete()

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
            warnings[user_id] += 1
            warn_count = warnings[user_id]

            if warn_count < 3:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ö†Ô∏è –ù–∞—Ä—É—à–µ–Ω–∏–µ: {user.mention_html()} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {warn_count}/3",
                    parse_mode="HTML"
                )
            else:
                warnings[user_id] = 0  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –º—É—Ç–∞
                await context.bot.restrict_chat_member(
                    chat_id=chat_id,
                    user_id=user_id,
                    permissions=ChatPermissions(can_send_messages=False),
                    until_date=message.date + timedelta(minutes=5)
                )
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚õî {user.mention_html()} –ø–æ–ª—É—á–∏–ª 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –∑–∞–º—É—á–µ–Ω –Ω–∞ 5 –º–∏–Ω—É—Ç.",
                    parse_mode="HTML"
                )

async def mute_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    chat_id = update.effective_chat.id
    sender = update.effective_user

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–¥–º–∏–Ω –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
    sender_member = await context.bot.get_chat_member(chat_id, sender.id)
    if sender_member.status not in [ChatMember.ADMINISTRATOR, ChatMember.OWNER]:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    if not context.args:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /mute @username")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
    try:
        username = context.args[0].lstrip('@')
        target = await context.bot.get_chat_member(chat_id, username)
        user = target.user
    except Exception as e:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    await context.bot.restrict_chat_member(
        chat_id=chat_id,
        user_id=user.id,
        permissions=ChatPermissions(can_send_messages=False),
        until_date=update.message.date + timedelta(minutes=5)
    )
    await update.message.reply_text(f"üîá {user.mention_html()} –∑–∞–º—É—á–µ–Ω –Ω–∞ 5 –º–∏–Ω—É—Ç.", parse_mode="HTML")

async def unmute_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    chat_id = update.effective_chat.id
    sender = update.effective_user

    sender_member = await context.bot.get_chat_member(chat_id, sender.id)
    if sender_member.status not in [ChatMember.ADMINISTRATOR, ChatMember.OWNER]:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    if not context.args:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /unmute @username")
        return

    try:
        username = context.args[0].lstrip('@')
        target = await context.bot.get_chat_member(chat_id, username)
        user = target.user
    except Exception as e:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    await context.bot.restrict_chat_member(
        chat_id=chat_id,
        user_id=user.id,
        permissions=ChatPermissions(can_send_messages=True)
    )
    await update.message.reply_text(f"‚úÖ {user.mention_html()} —Ä–∞–∑–º—É—á–µ–Ω.", parse_mode="HTML")



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    BOT_TOKEN = "7790547022:AAG5iIbkd5wE9Jh2X_fBFUuX535s4C4YUBc"

    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CommandHandler("mute", mute_command))
    app.add_handler(CommandHandler("unmute", unmute_command))

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
    app.run_polling()

if __name__ == "__main__":
    main()
