import os
import logging
from datetime import timedelta
from collections import defaultdict
from telegram import (
    Update,
    ChatMember,
    ChatPermissions,
    User,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Ä–µ–∫–ª–∞–º—ã
AD_KEYWORDS = ["http", "https", "t.me", "bit.ly", "promo", "advertise", "buy now", "sale", "discount"]

# –•—Ä–∞–Ω–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
warnings = defaultdict(int)

BOT_TOKEN = os.getenv("BOT_TOKEN")

def contains_advertising(text: str) -> bool:
    return any(word in text.lower() for word in AD_KEYWORDS)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message or not message.text:
        return

    user = message.from_user
    chat_id = message.chat.id
    user_id = user.id
    text = message.text

    if contains_advertising(text):
        member = await context.bot.get_chat_member(chat_id, user_id)
        if member.status not in [ChatMember.ADMINISTRATOR, ChatMember.OWNER]:
            await message.delete()
            warnings[user_id] += 1
            warn_count = warnings[user_id]

            if warn_count < 3:
                await message.reply_html(
                    f"{user.mention_html()}, ‚ö†Ô∏è —ç—Ç–æ —Ä–µ–∫–ª–∞–º–∞. –£ –≤–∞—Å {warn_count}/3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π."
                )
            else:
                warnings[user_id] = 0
                await context.bot.restrict_chat_member(
                    chat_id,
                    user_id,
                    permissions=ChatPermissions(can_send_messages=False),
                    until_date=message.date + timedelta(minutes=5),
                )
                await message.reply_html(
                    f"{user.mention_html()}, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è. –í–∞—Å –∑–∞–º—É—Ç–∏–ª–∏ –Ω–∞ 5 –º–∏–Ω—É—Ç."
                )

# –ö–æ–º–∞–Ω–¥–∞ /mute @user
async def mute_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    chat_id = message.chat.id

    if not await is_admin(context, chat_id, message.from_user.id):
        await message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    if not message.reply_to_message:
        await message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user_to_mute = message.reply_to_message.from_user
    await context.bot.restrict_chat_member(
        chat_id,
        user_to_mute.id,
        permissions=ChatPermissions(can_send_messages=False),
        until_date=message.date + timedelta(minutes=5)
    )
    await message.reply_text(f"üîá {user_to_mute.mention_html()} –±—ã–ª –∑–∞–º—É—á–µ–Ω –Ω–∞ 5 –º–∏–Ω—É—Ç.", parse_mode="HTML")

# –ö–æ–º–∞–Ω–¥–∞ /unmute @user
async def unmute_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    chat_id = message.chat.id

    if not await is_admin(context, chat_id, message.from_user.id):
        await message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    if not message.reply_to_message:
        await message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user_to_unmute = message.reply_to_message.from_user
    await context.bot.restrict_chat_member(
        chat_id,
        user_to_unmute.id,
        permissions=ChatPermissions(can_send_messages=True)
    )
    await message.reply_text(f"üîä {user_to_unmute.mention_html()} —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.", parse_mode="HTML")

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –∞–¥–º–∏–Ω –ª–∏
async def is_admin(context: ContextTypes.DEFAULT_TYPE, chat_id: int, user_id: int) -> bool:
    member = await context.bot.get_chat_member(chat_id, user_id)
    return member.status in [ChatMember.ADMINISTRATOR, ChatMember.OWNER]

# –ó–∞–ø—É—Å–∫
async def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CommandHandler("mute", mute_command))
    app.add_handler(CommandHandler("unmute", unmute_command))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π mute/unmute.")
    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
